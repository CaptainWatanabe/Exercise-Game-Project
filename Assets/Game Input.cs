//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Game Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game Input"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""e7f12014-598b-494f-a6b0-7e306ded6de1"",
            ""actions"": [
                {
                    ""name"": ""StepCounter"",
                    ""type"": ""Value"",
                    ""id"": ""12fa750c-73a1-4982-af83-7e1e011bfedb"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AccelerationCounter"",
                    ""type"": ""Value"",
                    ""id"": ""d77d1927-0ab1-4f2a-937f-c91a163b8a71"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AttitudeSensor"",
                    ""type"": ""Value"",
                    ""id"": ""fea8232b-6f38-4a59-a7d5-7140d221b8c3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GryroSensor"",
                    ""type"": ""Value"",
                    ""id"": ""d417ebb2-01a3-4945-adc3-4d83034dbd3a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51ec9900-5ed9-48b7-9dd7-258c3897495c"",
                    ""path"": ""<StepCounter>/stepCounter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StepCounter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9636d51-3cc2-4e7d-b05d-1f1b10dab728"",
                    ""path"": ""<Sensor>/stepCounter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StepCounter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3cc97d8-9952-422b-b926-4aed8988f441"",
                    ""path"": ""<LinearAccelerationSensor>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AccelerationCounter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b229bbae-b0cb-44be-97c6-e16b48ef17dc"",
                    ""path"": ""<AttitudeSensor>/attitude"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttitudeSensor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6daa2dd1-6aa4-4323-bfca-3e48f6429137"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GryroSensor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_StepCounter = m_InGame.FindAction("StepCounter", throwIfNotFound: true);
        m_InGame_AccelerationCounter = m_InGame.FindAction("AccelerationCounter", throwIfNotFound: true);
        m_InGame_AttitudeSensor = m_InGame.FindAction("AttitudeSensor", throwIfNotFound: true);
        m_InGame_GryroSensor = m_InGame.FindAction("GryroSensor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private IInGameActions m_InGameActionsCallbackInterface;
    private readonly InputAction m_InGame_StepCounter;
    private readonly InputAction m_InGame_AccelerationCounter;
    private readonly InputAction m_InGame_AttitudeSensor;
    private readonly InputAction m_InGame_GryroSensor;
    public struct InGameActions
    {
        private @GameInput m_Wrapper;
        public InGameActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @StepCounter => m_Wrapper.m_InGame_StepCounter;
        public InputAction @AccelerationCounter => m_Wrapper.m_InGame_AccelerationCounter;
        public InputAction @AttitudeSensor => m_Wrapper.m_InGame_AttitudeSensor;
        public InputAction @GryroSensor => m_Wrapper.m_InGame_GryroSensor;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void SetCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterface != null)
            {
                @StepCounter.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnStepCounter;
                @StepCounter.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnStepCounter;
                @StepCounter.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnStepCounter;
                @AccelerationCounter.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnAccelerationCounter;
                @AccelerationCounter.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnAccelerationCounter;
                @AccelerationCounter.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnAccelerationCounter;
                @AttitudeSensor.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnAttitudeSensor;
                @AttitudeSensor.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnAttitudeSensor;
                @AttitudeSensor.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnAttitudeSensor;
                @GryroSensor.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnGryroSensor;
                @GryroSensor.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnGryroSensor;
                @GryroSensor.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnGryroSensor;
            }
            m_Wrapper.m_InGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StepCounter.started += instance.OnStepCounter;
                @StepCounter.performed += instance.OnStepCounter;
                @StepCounter.canceled += instance.OnStepCounter;
                @AccelerationCounter.started += instance.OnAccelerationCounter;
                @AccelerationCounter.performed += instance.OnAccelerationCounter;
                @AccelerationCounter.canceled += instance.OnAccelerationCounter;
                @AttitudeSensor.started += instance.OnAttitudeSensor;
                @AttitudeSensor.performed += instance.OnAttitudeSensor;
                @AttitudeSensor.canceled += instance.OnAttitudeSensor;
                @GryroSensor.started += instance.OnGryroSensor;
                @GryroSensor.performed += instance.OnGryroSensor;
                @GryroSensor.canceled += instance.OnGryroSensor;
            }
        }
    }
    public InGameActions @InGame => new InGameActions(this);
    public interface IInGameActions
    {
        void OnStepCounter(InputAction.CallbackContext context);
        void OnAccelerationCounter(InputAction.CallbackContext context);
        void OnAttitudeSensor(InputAction.CallbackContext context);
        void OnGryroSensor(InputAction.CallbackContext context);
    }
}
